{
  "address": "0x73cb180bf0521828d8849bc8CF2B920918e23032",
  "abi": [
    {
      "inputs": [],
      "name": "afterRedeploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_remoteHub",
          "type": "address"
        }
      ],
      "name": "setRemoteHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "blockGetter",
          "type": "address"
        }
      ],
      "name": "BlockGetterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "BuyFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compensateLoss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "CompensateLossUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "EventExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insurance",
          "type": "address"
        }
      ],
      "name": "InsuranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mark2market",
          "type": "address"
        }
      ],
      "name": "Mark2MarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abroad",
          "type": "uint256"
        }
      ],
      "name": "MaxAbroad",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPayoutTime",
          "type": "uint256"
        }
      ],
      "name": "NextPayoutTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnNotEnoughLimitRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleLoss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "OracleLossUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "PaidBuyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "PaidRedeemFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deltaUsdPlus",
          "type": "uint256"
        }
      ],
      "name": "PayoutAbroad",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidityIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "excessProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insurancePremium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceLoss",
          "type": "uint256"
        }
      ],
      "name": "PayoutEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutManager",
          "type": "address"
        }
      ],
      "name": "PayoutManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPayoutTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "PayoutTimesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "portfolioManager",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ProfitRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "RoleManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdPlus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "TokensUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FISK_FACTOR_DM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQ_DELTA_DM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNIT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "abroadMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "abroadMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockGetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compensateLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compensateLossDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mark2market",
      "outputs": [
        {
          "internalType": "contract IMark2Market",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "referral",
              "type": "string"
            }
          ],
          "internalType": "struct Exchange.MintParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPayoutTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleLossDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "simulate",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IInsuranceExchange.SwapData",
          "name": "swapData",
          "type": "tuple"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "int256",
          "name": "swapAmount",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutManager",
      "outputs": [
        {
          "internalType": "contract IPayoutManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutTimeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "contract IPortfolioManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blockGetter",
          "type": "address"
        }
      ],
      "name": "setBlockGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_compensateLoss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setCompensateLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurance",
          "type": "address"
        }
      ],
      "name": "setInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mark2market",
          "type": "address"
        }
      ],
      "name": "setMark2Market",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxAbroad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleLoss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setOracleLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutManager",
          "type": "address"
        }
      ],
      "name": "setPayoutManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextPayoutTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "setPayoutTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolioManager",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_profitRecipient",
          "type": "address"
        }
      ],
      "name": "setProfitRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdPlus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPlus",
      "outputs": [
        {
          "internalType": "contract IUsdPlusToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 7,
  "solcInputHash": "d1ed7f152c1f0d057903597355113f46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blockGetter\",\"type\":\"address\"}],\"name\":\"BlockGetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compensateLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"CompensateLossUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"EventExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insurance\",\"type\":\"address\"}],\"name\":\"InsuranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mark2market\",\"type\":\"address\"}],\"name\":\"Mark2MarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abroad\",\"type\":\"uint256\"}],\"name\":\"MaxAbroad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayoutTime\",\"type\":\"uint256\"}],\"name\":\"NextPayoutTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnNotEnoughLimitRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"OracleLossUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PaidBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PaidRedeemFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaUsdPlus\",\"type\":\"uint256\"}],\"name\":\"PayoutAbroad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insurancePremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceLoss\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutManager\",\"type\":\"address\"}],\"name\":\"PayoutManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPayoutTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"PayoutTimesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portfolioManager\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ProfitRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"RoleManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"TokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FISK_FACTOR_DM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQ_DELTA_DM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abroadMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abroadMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensateLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensateLossDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mark2market\",\"outputs\":[{\"internalType\":\"contract IMark2Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"internalType\":\"struct Exchange.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLossDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"simulate\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IInsuranceExchange.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"swapAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutManager\",\"outputs\":[{\"internalType\":\"contract IPayoutManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutTimeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"contract IPortfolioManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockGetter\",\"type\":\"address\"}],\"name\":\"setBlockGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compensateLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setCompensateLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurance\",\"type\":\"address\"}],\"name\":\"setInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mark2market\",\"type\":\"address\"}],\"name\":\"setMark2Market\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxAbroad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setOracleLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutManager\",\"type\":\"address\"}],\"name\":\"setPayoutManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextPayoutTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"setPayoutTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolioManager\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitRecipient\",\"type\":\"address\"}],\"name\":\"setProfitRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdPlus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPlus\",\"outputs\":[{\"internalType\":\"contract IUsdPlusToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payout(bool,(address,address,uint256,bytes))\":{\"details\":\"Payout The root method of protocol USD+ Calculates delta total NAV - total supply USD+ and accrues profit or loss among all token holders What do method? - Claim rewards from all strategy - Increase liquidity index USD+ on amount of profit - Decrease liquidity index USD+ on amount of loss Support Insurance mode: Only if insurance is set What the Insurance to do? If USD+ has Loss then Exchange coverts the loss through Insurance if USD+ has profit then Exchange send premium amount to Insurance Explain params:\",\"params\":{\"simulate\":\"- allow to get amount loss/premium for prepare swapData (call.static)\",\"swapData\":\"- Odos swap data for swapping OVN->asset or asset->OVN in Insurance\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeem(address,uint256)\":{\"params\":{\"_amount\":\"Amount of USD+ to burn\",\"_asset\":\"Asset to redeem\"},\"returns\":{\"_0\":\"Amount of asset unstacked and transferred to caller\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IInsuranceExchange.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IBlockGetter.sol\\\";\\nimport \\\"./interfaces/IPayoutManager.sol\\\";\\nimport \\\"./interfaces/IRoleManager.sol\\\";\\nimport \\\"./interfaces/IUsdPlusToken.sol\\\";\\n\\n\\ncontract Exchange is Initializable, AccessControlUpgradeable, UUPSUpgradeable, PausableUpgradeable {\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n    bytes32 public constant UNIT_ROLE = keccak256(\\\"UNIT_ROLE\\\");\\n\\n    uint256 public constant LIQ_DELTA_DM   = 1e6;\\n    uint256 public constant FISK_FACTOR_DM = 1e5;\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    // ---  fields\\n\\n    IUsdPlusToken public usdPlus;\\n    IERC20 public usdc; // asset name\\n\\n    IPortfolioManager public portfolioManager; //portfolio manager contract\\n    IMark2Market public mark2market;\\n\\n    uint256 public buyFee;\\n    uint256 public buyFeeDenominator; // ~ 100 %\\n\\n    uint256 public redeemFee;\\n    uint256 public redeemFeeDenominator; // ~ 100 %\\n\\n    // next payout time in epoch seconds\\n    uint256 public nextPayoutTime;\\n\\n    // period between payouts in seconds, need to calc nextPayoutTime\\n    uint256 public payoutPeriod;\\n\\n    // range of time for starting near next payout time at seconds\\n    // if time in [nextPayoutTime-payoutTimeRange;nextPayoutTime+payoutTimeRange]\\n    //    then payouts can be started by payout() method anyone\\n    // else if time more than nextPayoutTime+payoutTimeRange\\n    //    then payouts started by any next buy/redeem\\n    uint256 public payoutTimeRange;\\n\\n    IPayoutManager public payoutManager;\\n\\n    // last block number when buy/redeem was executed\\n    uint256 public lastBlockNumber;\\n\\n    uint256 public abroadMin; // deprecated and not used in current version\\n    uint256 public abroadMax;\\n\\n    address public insurance;\\n\\n    uint256 public oracleLoss;\\n    uint256 public oracleLossDenominator;\\n\\n    uint256 public compensateLoss;\\n    uint256 public compensateLossDenominator;\\n\\n    address public profitRecipient;\\n\\n    address public blockGetter;\\n    IRoleManager public roleManager;\\n\\n    uint256 private _reentrancyGuardStatus;\\n\\n    // ---  events\\n\\n    event TokensUpdated(address usdPlus, address asset);\\n    event Mark2MarketUpdated(address mark2market);\\n    event RoleManagerUpdated(address roleManager);\\n    event PortfolioManagerUpdated(address portfolioManager);\\n    event BuyFeeUpdated(uint256 fee, uint256 feeDenominator);\\n    event RedeemFeeUpdated(uint256 fee, uint256 feeDenominator);\\n    event PayoutTimesUpdated(uint256 nextPayoutTime, uint256 payoutPeriod, uint256 payoutTimeRange);\\n    event PayoutManagerUpdated(address payoutManager);\\n    event InsuranceUpdated(address insurance);\\n    event BlockGetterUpdated(address blockGetter);\\n\\n    event EventExchange(string label, uint256 amount, uint256 fee, address sender, string referral);\\n    event PayoutEvent(\\n        uint256 profit,\\n        uint256 newLiquidityIndex,\\n        uint256 excessProfit,\\n        uint256 insurancePremium,\\n        uint256 insuranceLoss\\n    );\\n    event PaidBuyFee(uint256 amount, uint256 feeAmount);\\n    event PaidRedeemFee(uint256 amount, uint256 feeAmount);\\n    event NextPayoutTime(uint256 nextPayoutTime);\\n    event OnNotEnoughLimitRedeemed(address token, uint256 amount);\\n    event PayoutAbroad(uint256 delta, uint256 deltaUsdPlus);\\n    event MaxAbroad(uint256 abroad);\\n    event ProfitRecipientUpdated(address recipient);\\n    event OracleLossUpdate(uint256 oracleLoss, uint256 denominator);\\n    event CompensateLossUpdate(uint256 compensateLoss, uint256 denominator);\\n\\n    // ---  modifiers\\n\\n    modifier nonReentrant() {\\n        require(_reentrancyGuardStatus != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _reentrancyGuardStatus = _ENTERED;\\n        _;\\n        _reentrancyGuardStatus = _NOT_ENTERED;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(roleManager.hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n\\n    modifier onlyUnit(){\\n        require(roleManager.hasRole(UNIT_ROLE, msg.sender), \\\"Restricted to Unit\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        buyFee = 40;\\n        // ~ 100 %\\n        buyFeeDenominator = 100000;\\n\\n        redeemFee = 40;\\n        // ~ 100 %\\n        redeemFeeDenominator = 100000;\\n\\n        // 1637193600 = 2021-11-18T00:00:00Z\\n        nextPayoutTime = 1637193600;\\n\\n        payoutPeriod = 24 * 60 * 60;\\n\\n        payoutTimeRange = 24 * 60 * 60; // 24 hours\\n\\n        abroadMax = 1000350;\\n\\n        oracleLossDenominator = 100000;\\n        compensateLossDenominator = 100000;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  setters Admin\\n\\n    function setTokens(address _usdPlus, address _asset) external onlyAdmin {\\n        require(_usdPlus != address(0), \\\"Zero address not allowed\\\");\\n        require(_asset != address(0), \\\"Zero address not allowed\\\");\\n        usdPlus = IUsdPlusToken(_usdPlus);\\n        usdc = IERC20(_asset);\\n        emit TokensUpdated(_usdPlus, _asset);\\n    }\\n\\n    function setPortfolioManager(address _portfolioManager) external onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        portfolioManager = IPortfolioManager(_portfolioManager);\\n        emit PortfolioManagerUpdated(_portfolioManager);\\n    }\\n\\n    function setMark2Market(address _mark2market) external onlyAdmin {\\n        require(_mark2market != address(0), \\\"Zero address not allowed\\\");\\n        mark2market = IMark2Market(_mark2market);\\n        emit Mark2MarketUpdated(_mark2market);\\n    }\\n\\n    function setRoleManager(address _roleManager) external onlyAdmin {\\n        require(_roleManager != address(0), \\\"Zero address not allowed\\\");\\n        roleManager = IRoleManager(_roleManager);\\n        emit RoleManagerUpdated(_roleManager);\\n    }\\n\\n    function setPayoutManager(address _payoutManager) external onlyAdmin {\\n        payoutManager = IPayoutManager(_payoutManager);\\n        emit PayoutManagerUpdated(_payoutManager);\\n    }\\n\\n    function setInsurance(address _insurance) external onlyAdmin {\\n        require(_insurance != address(0), \\\"Zero address not allowed\\\");\\n        insurance = _insurance;\\n        emit InsuranceUpdated(_insurance);\\n    }\\n\\n    function setBlockGetter(address _blockGetter) external onlyAdmin {\\n        // blockGetter can be empty\\n        blockGetter = _blockGetter;\\n        emit BlockGetterUpdated(_blockGetter);\\n    }\\n\\n    function setProfitRecipient(address _profitRecipient) external onlyAdmin {\\n        require(_profitRecipient != address(0), \\\"Zero address not allowed\\\");\\n        profitRecipient = _profitRecipient;\\n        emit ProfitRecipientUpdated(_profitRecipient);\\n    }\\n\\n    // ---  setters Portfolio Manager\\n\\n    function setBuyFee(uint256 _fee, uint256 _feeDenominator) external onlyPortfolioAgent {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        require(_feeDenominator >= _fee, \\\"fee > denominator\\\");\\n        buyFee = _fee;\\n        buyFeeDenominator = _feeDenominator;\\n        emit BuyFeeUpdated(buyFee, buyFeeDenominator);\\n    }\\n\\n    function setRedeemFee(uint256 _fee, uint256 _feeDenominator) external onlyPortfolioAgent {\\n        require(_feeDenominator != 0, \\\"Zero denominator not allowed\\\");\\n        require(_feeDenominator >= _fee, \\\"fee > denominator\\\");\\n        redeemFee = _fee;\\n        redeemFeeDenominator = _feeDenominator;\\n        emit RedeemFeeUpdated(redeemFee, redeemFeeDenominator);\\n    }\\n\\n\\n    function setOracleLoss(uint256 _oracleLoss,  uint256 _denominator) external onlyPortfolioAgent {\\n        require(_denominator != 0, \\\"Zero denominator not allowed\\\");\\n        oracleLoss = _oracleLoss;\\n        oracleLossDenominator = _denominator;\\n        emit OracleLossUpdate(_oracleLoss, _denominator);\\n    }\\n\\n    function setCompensateLoss(uint256 _compensateLoss,  uint256 _denominator) external onlyPortfolioAgent {\\n        require(_denominator != 0, \\\"Zero denominator not allowed\\\");\\n        compensateLoss = _compensateLoss;\\n        compensateLossDenominator = _denominator;\\n        emit CompensateLossUpdate(_compensateLoss, _denominator);\\n    }\\n\\n\\n    function setMaxAbroad(uint256 _max) external onlyPortfolioAgent {\\n        abroadMax = _max;\\n        emit MaxAbroad(abroadMax);\\n    }\\n\\n    function setPayoutTimes(\\n        uint256 _nextPayoutTime,\\n        uint256 _payoutPeriod,\\n        uint256 _payoutTimeRange\\n    ) external onlyPortfolioAgent {\\n        require(_nextPayoutTime != 0, \\\"Zero _nextPayoutTime not allowed\\\");\\n        require(_payoutPeriod != 0, \\\"Zero _payoutPeriod not allowed\\\");\\n        require(_nextPayoutTime > _payoutTimeRange, \\\"_nextPayoutTime shoud be more than _payoutTimeRange\\\");\\n        nextPayoutTime = _nextPayoutTime;\\n        payoutPeriod = _payoutPeriod;\\n        payoutTimeRange = _payoutTimeRange;\\n        emit PayoutTimesUpdated(nextPayoutTime, payoutPeriod, payoutTimeRange);\\n    }\\n\\n    // ---  logic\\n\\n    function pause() public onlyPortfolioAgent {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPortfolioAgent {\\n        _unpause();\\n    }\\n\\n    struct MintParams {\\n        address asset;   // USDC | BUSD depends at chain\\n        uint256 amount;  // amount asset\\n        string referral; // code from Referral Program -> if not have -> set empty\\n    }\\n\\n    // Minting USD+ in exchange for an asset\\n\\n    function mint(MintParams calldata params) external whenNotPaused nonReentrant returns (uint256) {\\n        return _buy(params.asset, params.amount, params.referral);\\n    }\\n\\n    // Deprecated method - not recommended for use\\n    function buy(address _asset, uint256 _amount) external whenNotPaused nonReentrant returns (uint256) {\\n        return _buy(_asset, _amount, \\\"\\\");\\n    }\\n\\n\\n    /**\\n     * @param _asset Asset to spend\\n     * @param _amount Amount of asset to spend\\n     * @param _referral Referral code\\n     * @return Amount of minted USD+ to caller\\n     */\\n    function _buy(address _asset, uint256 _amount, string memory _referral) internal returns (uint256) {\\n        require(_asset == address(usdc), \\\"Only asset available for buy\\\");\\n\\n        uint256 currentBalance = usdc.balanceOf(msg.sender);\\n        require(currentBalance >= _amount, \\\"Not enough tokens to buy\\\");\\n\\n        require(_amount > 0, \\\"Amount of asset is zero\\\");\\n\\n        uint256 usdPlusAmount = _assetToRebase(_amount);\\n        require(usdPlusAmount > 0, \\\"Amount of USD+ is zero\\\");\\n\\n        uint256 _targetBalance = usdc.balanceOf(address(portfolioManager)) + _amount;\\n        SafeERC20.safeTransferFrom(usdc, msg.sender, address(portfolioManager), _amount);\\n        require(usdc.balanceOf(address(portfolioManager)) == _targetBalance, 'pm balance != target');\\n\\n        portfolioManager.deposit();\\n        _requireOncePerBlock(false);\\n\\n        uint256 buyFeeAmount;\\n        uint256 buyAmount;\\n        (buyAmount, buyFeeAmount) = _takeFee(usdPlusAmount, true);\\n\\n        usdPlus.mint(msg.sender, buyAmount);\\n\\n        emit EventExchange(\\\"mint\\\", buyAmount, buyFeeAmount, msg.sender, _referral);\\n\\n        return buyAmount;\\n    }\\n\\n    /**\\n     * @param _asset Asset to redeem\\n     * @param _amount Amount of USD+ to burn\\n     * @return Amount of asset unstacked and transferred to caller\\n     */\\n    function redeem(address _asset, uint256 _amount) external whenNotPaused nonReentrant returns (uint256) {\\n        require(_asset == address(usdc), \\\"Only asset available for redeem\\\");\\n        require(_amount > 0, \\\"Amount of USD+ is zero\\\");\\n        require(usdPlus.balanceOf(msg.sender) >= _amount, \\\"Not enough tokens to redeem\\\");\\n\\n        uint256 assetAmount = _rebaseToAsset(_amount);\\n        require(assetAmount > 0, \\\"Amount of asset is zero\\\");\\n\\n        uint256 redeemFeeAmount;\\n        uint256 redeemAmount;\\n\\n        (redeemAmount, redeemFeeAmount) = _takeFee(assetAmount, false);\\n\\n        (, bool isBalanced) = portfolioManager.withdraw(redeemAmount);\\n        _requireOncePerBlock(isBalanced);\\n\\n        // Or just burn from sender\\n        usdPlus.burn(msg.sender, _amount);\\n\\n        require(usdc.balanceOf(address(this)) >= redeemAmount, \\\"Not enough for transfer redeemAmount\\\");\\n        SafeERC20.safeTransfer(usdc, msg.sender, redeemAmount);\\n\\n        emit EventExchange(\\\"redeem\\\", redeemAmount, redeemFeeAmount, msg.sender, \\\"\\\");\\n\\n        return redeemAmount;\\n    }\\n\\n    /**\\n     * @dev Protect from flashloan attacks\\n     * Allow execute only one mint or redeem transaction in per block\\n     * ONLY if balance function triggered on PortfolioManager\\n     * in other cases: stake/unstake only from cash strategy is safe\\n     */\\n\\n    function _requireOncePerBlock(bool isBalanced) internal {\\n\\n        uint256 blockNumber;\\n\\n        // Arbitrum when call block.number return blockNumber from L1(mainnet)\\n        // To get a valid block, we use a BlockGetter contract with its own implementation of getting a block.number from L2(Arbitrum)\\n\\n        // What is it needed?\\n        // 15 seconds ~ average time for a new block to appear on the mainnet\\n\\n        // User1 send transaction mint:\\n        // - l1.blockNumber = 100\\n        // - l2.blockNumber = 60000\\n        // 5 seconds later\\n        // User2 send transaction mint:\\n        // - l1.blockNumber = 100\\n        // - l2.blockNumber = 60001\\n        // If blockNumber from L1 then tx be revert(\\\"Only once in block\\\")\\n        // If blockNumber from L2 then tx be success mint!\\n\\n        if (blockGetter != address(0)) {\\n            blockNumber = IBlockGetter(blockGetter).getNumber();\\n        } else {\\n            blockNumber = block.number;\\n        }\\n\\n        // Flag isBalanced take about:\\n        // PortfolioManager run balance function and unstake liquidity from non cash strategies\\n        // Check is not actual if stake/unstake will be only from cash strategy (for example Aave or Venus)\\n        if (isBalanced) {\\n            require(lastBlockNumber < blockNumber, \\\"Only once in block\\\");\\n        }\\n\\n        lastBlockNumber = blockNumber;\\n    }\\n\\n    function _takeFee(uint256 _amount, bool isBuy) internal view returns (uint256, uint256){\\n\\n        uint256 fee;\\n        uint256 feeDenominator;\\n\\n        if (isBuy) {\\n            fee = buyFee;\\n            feeDenominator = buyFeeDenominator;\\n        } else {\\n            fee = redeemFee;\\n            feeDenominator = redeemFeeDenominator;\\n        }\\n\\n        uint256 feeAmount = (_amount * fee) / feeDenominator;\\n        uint256 resultAmount = _amount - feeAmount;\\n\\n        return (resultAmount, feeAmount);\\n    }\\n\\n\\n    function _rebaseToAsset(uint256 _amount) internal view returns (uint256){\\n\\n        uint256 assetDecimals = IERC20Metadata(address(usdc)).decimals();\\n        uint256 usdPlusDecimals = usdPlus.decimals();\\n        if (assetDecimals > usdPlusDecimals) {\\n            _amount = _amount * (10 ** (assetDecimals - usdPlusDecimals));\\n        } else {\\n            _amount = _amount / (10 ** (usdPlusDecimals - assetDecimals));\\n        }\\n\\n        return _amount;\\n    }\\n\\n\\n    function _assetToRebase(uint256 _amount) internal view returns (uint256){\\n\\n        uint256 assetDecimals = IERC20Metadata(address(usdc)).decimals();\\n        uint256 usdPlusDecimals = usdPlus.decimals();\\n        if (assetDecimals > usdPlusDecimals) {\\n            _amount = _amount / (10 ** (assetDecimals - usdPlusDecimals));\\n        } else {\\n            _amount = _amount * (10 ** (usdPlusDecimals - assetDecimals));\\n        }\\n        return _amount;\\n    }\\n\\n\\n    /**\\n     * @dev Payout\\n     * The root method of protocol USD+\\n     * Calculates delta total NAV - total supply USD+ and accrues profit or loss among all token holders\\n     *\\n     * What do method?\\n     * - Claim rewards from all strategy\\n     * - Increase liquidity index USD+ on amount of profit\\n     * - Decrease liquidity index USD+ on amount of loss\\n     *\\n     * Support Insurance mode: Only if insurance is set\\n     * What the Insurance to do?\\n     * If USD+ has Loss then Exchange coverts the loss through Insurance\\n     * if USD+ has profit then Exchange send premium amount to Insurance\\n     *\\n     * Explain params:\\n     * @param simulate - allow to get amount loss/premium for prepare swapData (call.static)\\n     * @param swapData - Odos swap data for swapping OVN->asset or asset->OVN in Insurance\\n     */\\n\\n\\n    function payout(bool simulate, IInsuranceExchange.SwapData memory swapData) external whenNotPaused onlyUnit nonReentrant returns (int256 swapAmount) {\\n        \\n        require(address(payoutManager) != address(0) || usdPlus.nonRebaseOwnersLength() == 0, \\\"Need to specify payoutManager address\\\");\\n\\n        if (block.timestamp + payoutTimeRange < nextPayoutTime) {\\n            return 0;\\n        }\\n\\n        // 0. call claiming reward and balancing on PM\\n        // 1. get current amount of USD+\\n        // 2. get total sum of asset we can get from any source\\n        // 3. calc difference between total count of USD+ and asset\\n        // 4. update USD+ liquidity index\\n\\n        portfolioManager.claimAndBalance();\\n\\n        uint256 totalUsdPlus = usdPlus.totalSupply();\\n        uint256 previousUsdPlus = totalUsdPlus;\\n\\n        uint256 totalNav = _assetToRebase(mark2market.totalNetAssets());\\n        uint256 excessProfit;\\n        uint256 premium;\\n        uint256 loss;\\n\\n        uint256 delta;\\n\\n        if (totalUsdPlus > totalNav) {\\n\\n            // Negative rebase\\n            // USD+ have loss and we need to execute next steps:\\n            // 1. Loss may be related to oracles: we wait\\n            // 2. Loss is real then compensate all loss + [1] bps\\n\\n            loss = totalUsdPlus - totalNav;\\n            uint256 oracleLossAmount = totalUsdPlus * oracleLoss / oracleLossDenominator;\\n\\n            if(loss <= oracleLossAmount) {\\n                revert('OracleLoss');\\n            }else {\\n                loss += totalUsdPlus * compensateLoss / compensateLossDenominator;\\n                loss = _rebaseToAsset(loss);\\n                if (simulate) {\\n                    return -int256(loss);\\n                }\\n                if (swapData.amountIn != 0) {\\n                    IInsuranceExchange(insurance).compensate(swapData, loss, address(portfolioManager));\\n                    portfolioManager.deposit();\\n                }\\n            }\\n\\n        } else {\\n\\n            // Positive rebase\\n            // USD+ have profit and we need to execute next steps:\\n            // 1. Pay premium to Insurance\\n            // 2. If profit more max delta then transfer excess profit to OVN wallet\\n\\n            premium = _rebaseToAsset((totalNav - totalUsdPlus) * portfolioManager.getTotalRiskFactor() / FISK_FACTOR_DM);\\n\\n            if (simulate) {\\n                return int256(premium);\\n            }\\n\\n            if(premium > 0 && swapData.amountIn != 0) {\\n                portfolioManager.withdraw(premium);\\n                SafeERC20.safeTransfer(usdc, insurance, premium);\\n\\n                IInsuranceExchange(insurance).premium(swapData, premium);\\n                totalNav = totalNav - _assetToRebase(premium);\\n            }\\n\\n            delta = totalNav * LIQ_DELTA_DM / usdPlus.totalSupply();\\n\\n            if (abroadMax < delta) {\\n\\n                // Calculate the amount of USD+ to hit the maximum delta.\\n                // We send the difference to the OVN wallet.\\n\\n                uint256 newTotalSupply = totalNav * LIQ_DELTA_DM / abroadMax;\\n                excessProfit = newTotalSupply - usdPlus.totalSupply();\\n\\n                // Mint USD+ to OVN wallet\\n                require(profitRecipient != address(0), 'profitRecipient address is zero');\\n                usdPlus.mint(profitRecipient, excessProfit);\\n            }\\n\\n        }\\n\\n\\n        // In case positive rebase and negative rebase the value changes and we must update it:\\n        // - totalUsdPlus\\n        // - totalNav\\n\\n        totalUsdPlus = usdPlus.totalSupply();\\n        totalNav = _assetToRebase(mark2market.totalNetAssets());\\n\\n        require(totalNav >= totalUsdPlus, 'negative rebase');\\n\\n        // Calculating how much users profit after excess fee\\n        uint256 profit = totalNav - totalUsdPlus;\\n\\n        uint256 expectedTotalUsdPlus = previousUsdPlus + profit + excessProfit;\\n\\n        (NonRebaseInfo [] memory nonRebaseInfo, uint256 nonRebaseDelta) = usdPlus.changeSupply(totalNav);\\n\\n        // notify listener about payout done\\n        if (address(payoutManager) != address(0)) {\\n            usdPlus.mint(address(payoutManager), nonRebaseDelta);\\n            payoutManager.payoutDone(address(usdPlus), nonRebaseInfo);\\n        }\\n\\n        require(usdPlus.totalSupply() == totalNav,'total != nav');\\n        require(usdPlus.totalSupply() == expectedTotalUsdPlus, 'total != expected');\\n\\n        emit PayoutEvent(\\n            profit,\\n            0, // Maintaining backward compatibility for analytic service. In a new version not used.\\n            excessProfit,\\n            premium,\\n            loss\\n        );\\n\\n        // Update next payout time. Cycle for preventing gaps\\n        // Allow execute payout every day in one time (10:00)\\n\\n        // If we cannot execute payout (for any reason) in 10:00 and execute it in 15:00\\n        // then this cycle make 1 iteration and next payout time will be same 10:00 in next day\\n\\n        // If we cannot execute payout more than 2 days and execute it in 15:00\\n        // then this cycle make 3 iteration and next payout time will be same 10:00 in next day\\n\\n        for (; block.timestamp >= nextPayoutTime - payoutTimeRange;) {\\n            nextPayoutTime = nextPayoutTime + payoutPeriod;\\n        }\\n        emit NextPayoutTime(nextPayoutTime);\\n\\n        // If this is not a simulation, then we return the value is not used in any way\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5ddf12bf8be083afe2856e71c58f709d2c3ec2156595e3f3ecac49641fd2d3c4\",\"license\":\"MIT\"},\"contracts/interfaces/IBlockGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IBlockGetter {\\n\\n    function getNumber() external view returns (uint256);\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x10d2647e4d0617de607b49180ab953c2da23450a41ccc6a0043a8e2a7854da7b\",\"license\":\"MIT\"},\"contracts/interfaces/IInsuranceExchange.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IInsuranceExchange {\\n\\n    struct SwapData {\\n        address inputTokenAddress;\\n        address outputTokenAddress;\\n        uint256 amountIn;\\n        bytes data;\\n    }\\n\\n    struct InputMint {\\n        uint256 amount;\\n    }\\n\\n    struct InputRedeem {\\n        uint256 amount;\\n    }\\n\\n    function mint(InputMint calldata input) external;\\n\\n    function redeem(InputRedeem calldata input) external;\\n\\n    function payout() external;\\n\\n    function premium(SwapData memory swapData, uint256 premiumAmount) external;\\n\\n    function compensate(SwapData memory swapData, uint256 assetAmount, address to) external;\\n\\n    function requestWithdraw() external;\\n\\n    function checkWithdraw() external;\\n\\n\\n}\\n\",\"keccak256\":\"0x38e5f43f24bf22ac33c9bf8d7481ce84665e2fb620ebdf95c44a10bdacc5a87d\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n\\n    struct StrategyAsset {\\n        address strategy;\\n        uint256 netAssetValue;\\n        uint256 liquidationValue;\\n    }\\n\\n    function strategyAssets() external view returns (StrategyAsset[] memory);\\n\\n    function totalNetAssets() external view returns (uint256);\\n\\n    function totalLiquidationAssets() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x97bf2a7d1d430d602aab42c73bbeb2014e2c7d1bce4290f1b62654fa837150ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPayoutManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nstruct NonRebaseInfo {\\n    address pool;\\n    uint256 amount;\\n    uint256[10] __gap;\\n}\\n\\ninterface IPayoutManager {\\n\\n    function payoutDone(address _token, NonRebaseInfo [] memory nonRebaseInfo) external;\\n\\n}\\n\",\"keccak256\":\"0x9b103e5abe8222c9e9909b713246478d7ef3482497e69771dc694914956d3738\",\"license\":\"MIT\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        uint256 riskFactor;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    function deposit() external;\\n\\n    /**\\n     * @dev\\n     * Withdraw target amount assets from strategies\\n     * Send amount to Exchanger\\n     * @return withdrawAmount - how much PortfolioManager unstake from strategies\\n     * @return isBalanced - executed or not balance function on PortfolioManager\\n     */\\n\\n    function withdraw(uint256 _amount) external returns (uint256 withdrawAmount, bool isBalanced);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n    function getTotalRiskFactor() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eb97f38589433f430e990a8fc0ff45008fc703e93b2255689e1032b7c57ec94\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x89bd46e29de30f4645534e8cc43528ae7e0b6c464edbbdace05c3e61e0a7341f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUsdPlusToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IPayoutManager.sol\\\";\\n\\ninterface IUsdPlusToken {\\n\\n    function liquidityIndex() external view returns (uint256);\\n\\n    function setLiquidityIndex(uint256 _liquidityIndex) external;\\n\\n    function exchange() external view returns (address);\\n\\n    function mint(address _sender, uint256 _amount) external;\\n\\n    function burn(address _sender, uint256 _amount) external;\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev calculates the total supply of the specific aToken\\n     * since the balance of every single user increases over time, the total supply\\n     * does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalMint() external view returns (uint256);\\n\\n    function totalBurn() external view returns (uint256);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token\\n     * @return the scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function ownerLength() external view returns (uint256);\\n\\n    function nonRebaseOwnersLength() external view returns (uint256);\\n\\n    function ownerAt(uint256 index) external view returns (address);\\n\\n    function ownerBalanceAt(uint256 index) external view returns (uint256);\\n\\n    /**\\n   * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n    function rebaseOptIn(address _address) external;\\n\\n    function rebaseOptOut(address _address) external;\\n\\n    function changeSupply(uint256 _newTotalSupply) external returns (NonRebaseInfo [] memory, uint256);\\n\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x27c000bd9ef39a1e7705908e8785261d89e8cd4714cbec0e27f566b13787b7e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051614fce6200012060003960008181611195015281816111d5015281816114530152818161149301526123020152614fce6000f3fe60806040526004361061038b5760003560e01c80636cd7751f116101dc578063a440b21a11610102578063cecbbc07116100a0578063f1d588c51161006f578063f1d588c5146109ff578063f3869e8d14610a1f578063f695169314610a3f578063fb0ecfa414610a6057600080fd5b8063cecbbc071461099a578063d31a1934146109b1578063d547741f146109c8578063e3d9fc28146109e857600080fd5b8063c12e90e9116100dc578063c12e90e91461092c578063cbc7854e14610943578063cce7ec1314610963578063ce1aa76b1461098357600080fd5b8063a440b21a146108cc578063bc56bebf146108ec578063bd2160c21461090c57600080fd5b80638456cb591161017a5780639629300c116101495780639629300c14610869578063965fa21e146108895780639d70c129146108a0578063a217fddf146108b757600080fd5b80638456cb59146107f357806389cf3204146108085780638c754ef11461082957806391d148541461084957600080fd5b8063771d147e116101b6578063771d147e1461078f5780637c5261d8146107a65780637e2bad1e146107bd5780638129fc1c146107de57600080fd5b80636cd7751f146107385780636d8ebaa8146107585780637181896f1461076f57600080fd5b80633659cfe6116102c15780634f1ef2861161025f5780635c975abb1161022e5780635c975abb146106c65780635dbd733a146106de578063620b75df1461070057806362f098951461072157600080fd5b80634f1ef2861461065d578063514e460a1461067057806351b4925c1461069157806352d1902d146106b157600080fd5b80633f4ba83a1161029b5780633f4ba83a146105dd57806347062402146105f25780634795084f14610609578063497d91921461062957600080fd5b80633659cfe61461057c578063370447711461059c5780633e413bee146105bc57600080fd5b806325990d631161032e5780632f2ff15d116103085780632f2ff15d146104fa578063302056031461051a5780633083a8e31461053b57806336568abe1461055c57600080fd5b806325990d63146104ac5780632b78fe78146104c35780632d8cc004146104da57600080fd5b80631346c9e71161036a5780631346c9e7146104205780631e9a695014610445578063248a9ca3146104655780632552317c1461049557600080fd5b8062435da51461039057806301ffc9a7146103ce578063085cffc1146103fe575b600080fd5b34801561039c57600080fd5b50610143546103b1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103da57600080fd5b506103ee6103e936600461437c565b610a80565b60405190151581526020016103c5565b34801561040a57600080fd5b5061041e6104193660046143a6565b610ab7565b005b34801561042c57600080fd5b506104376101405481565b6040519081526020016103c5565b34801561045157600080fd5b506104376104603660046143d4565b610b9a565b34801561047157600080fd5b506104376104803660046143a6565b60009081526065602052604090206001015490565b3480156104a157600080fd5b506104376101395481565b3480156104b857600080fd5b5061043761013f5481565b3480156104cf57600080fd5b5061043761013a5481565b3480156104e657600080fd5b5061041e6104f5366004614400565b610fdc565b34801561050657600080fd5b5061041e610515366004614422565b6110e3565b34801561052657600080fd5b50610142546103b1906001600160a01b031681565b34801561054757600080fd5b50610138546103b1906001600160a01b031681565b34801561056857600080fd5b5061041e610577366004614422565b61110d565b34801561058857600080fd5b5061041e610597366004614452565b61118b565b3480156105a857600080fd5b5061041e6105b7366004614452565b61126a565b3480156105c857600080fd5b5061012e546103b1906001600160a01b031681565b3480156105e957600080fd5b5061041e611306565b3480156105fe57600080fd5b506104376101315481565b34801561061557600080fd5b5061041e610624366004614452565b6113ad565b34801561063557600080fd5b506104377fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d781565b61041e61066b366004614596565b611449565b34801561067c57600080fd5b5061012d546103b1906001600160a01b031681565b34801561069d57600080fd5b506104376106ac3660046145f4565b611515565b3480156106bd57600080fd5b506104376122f5565b3480156106d257600080fd5b5060fb5460ff166103ee565b3480156106ea57600080fd5b50610437600080516020614f3283398151915281565b34801561070c57600080fd5b5061012f546103b1906001600160a01b031681565b34801561072d57600080fd5b506104376101325481565b34801561074457600080fd5b5061041e610753366004614452565b6123a8565b34801561076457600080fd5b506104376101355481565b34801561077b57600080fd5b5061041e61078a366004614452565b612444565b34801561079b57600080fd5b50610437620186a081565b3480156107b257600080fd5b5061043761013b5481565b3480156107c957600080fd5b50610141546103b1906001600160a01b031681565b3480156107ea57600080fd5b5061041e6124ba565b3480156107ff57600080fd5b5061041e612627565b34801561081457600080fd5b5061013c546103b1906001600160a01b031681565b34801561083557600080fd5b5061041e610844366004614452565b6126cc565b34801561085557600080fd5b506103ee610864366004614422565b612742565b34801561087557600080fd5b506104376108843660046146a6565b61276d565b34801561089557600080fd5b506104376101335481565b3480156108ac57600080fd5b5061043761013e5481565b3480156108c357600080fd5b50610437600081565b3480156108d857600080fd5b5061041e6108e7366004614452565b6127fc565b3480156108f857600080fd5b5061041e610907366004614400565b612898565b34801561091857600080fd5b5061041e610927366004614400565b6129db565b34801561093857600080fd5b506104376101345481565b34801561094f57600080fd5b5061041e61095e3660046146e1565b612ada565b34801561096f57600080fd5b5061043761097e3660046143d4565b612bb6565b34801561098f57600080fd5b506104376101365481565b3480156109a657600080fd5b506104376101375481565b3480156109bd57600080fd5b50610437620f424081565b3480156109d457600080fd5b5061041e6109e3366004614422565b612c13565b3480156109f457600080fd5b5061043761013d5481565b348015610a0b57600080fd5b5061041e610a1a366004614452565b612c38565b348015610a2b57600080fd5b5061041e610a3a36600461470f565b612cd4565b348015610a4b57600080fd5b50610130546103b1906001600160a01b031681565b348015610a6c57600080fd5b5061041e610a7b366004614400565b612ed4565b60006001600160e01b03198216637965db0b60e01b1480610ab157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b38919061473b565b610b5d5760405162461bcd60e51b8152600401610b5490614758565b60405180910390fd5b61013b8190556040518181527faa9ef91f649f41f8a2d45738d2989c61c58e0e77af8222f8246cba1bf391d93a906020015b60405180910390a150565b6000610ba4613017565b60026101445403610bc75760405162461bcd60e51b8152600401610b549061478f565b60026101445561012e546001600160a01b03848116911614610c2b5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920617373657420617661696c61626c6520666f722072656465656d006044820152606401610b54565b60008211610c745760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206f66205553442b206973207a65726f60501b6044820152606401610b54565b61012d546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce191906147c6565b1015610d2f5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d00000000006044820152606401610b54565b6000610d3a8361305d565b905060008111610d865760405162461bcd60e51b8152602060048201526017602482015276416d6f756e74206f66206173736574206973207a65726f60481b6044820152606401610b54565b600080610d948360006131b4565b61012f54604051632e1a7d4d60e01b8152600481018490529194509192506000916001600160a01b031690632e1a7d4d9060240160408051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906147df565b915050610e168161320f565b61012d54604051632770a7eb60e21b8152336004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505061012e546040516370a0823160e01b81523060048201528593506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906147c6565b1015610f445760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820666f72207472616e736665722072656465656d416d6044820152631bdd5b9d60e21b6064820152608401610b54565b61012e54610f5c906001600160a01b031633846132fa565b6040805160a08082526006908201526572656465656d60d01b60c08201526020810184905290810184905233606082015260e0608082018190526000908201527f5215f03b099407f64e52d76ef2416a46b32915d572e87db5d40282538ed36484906101000160405180910390a150925050505b60016101445592915050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d919061473b565b6110795760405162461bcd60e51b8152600401610b5490614758565b806000036110995760405162461bcd60e51b8152600401610b5490614804565b61013d82905561013e81905560408051838152602081018390527ffd477784a91e10a1a8ac1832d94895eef49a29940452ad3635cc3e8eab77e4b791015b60405180910390a15050565b6000828152606560205260409020600101546110fe8161335d565b6111088383613367565b505050565b6001600160a01b038116331461117d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b54565b61118782826133ed565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111d35760405162461bcd60e51b8152600401610b549061483b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661121c600080516020614f52833981519152546001600160a01b031690565b6001600160a01b0316146112425760405162461bcd60e51b8152600401610b5490614887565b61124b81613454565b604080516000808252602082019092526112679183919061345f565b50565b611275600033612742565b6112915760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166112b75760405162461bcd60e51b8152600401610b5490614901565b61013080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd90602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611387919061473b565b6113a35760405162461bcd60e51b8152600401610b5490614758565b6113ab6135ca565b565b6113b8600033612742565b6113d45760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166113fa5760405162461bcd60e51b8152600401610b5490614901565b61014180546001600160a01b0319166001600160a01b0383169081179091556040519081527f97519908572e1d17b754081a3fd2ac67644cf8cda617d672983db516e2308e7c90602001610b8f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114915760405162461bcd60e51b8152600401610b549061483b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114da600080516020614f52833981519152546001600160a01b031690565b6001600160a01b0316146115005760405162461bcd60e51b8152600401610b5490614887565b61150982613454565b6111878282600161345f565b600061151f613017565b61014354604051632474521560e21b81527fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b2919061473b565b6115f35760405162461bcd60e51b815260206004820152601260248201527114995cdd1c9a58dd1959081d1bc8155b9a5d60721b6044820152606401610b54565b600261014454036116165760405162461bcd60e51b8152600401610b549061478f565b600261014455610138546001600160a01b03161515806116ab575061012d60009054906101000a90046001600160a01b03166001600160a01b031663767b479c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a991906147c6565b155b6117055760405162461bcd60e51b815260206004820152602560248201527f4e65656420746f2073706563696679207061796f75744d616e61676572206164604482015264647265737360d81b6064820152608401610b54565b6101355461013754611717904261494e565b101561172557506000610fd0565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c6bbf4cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b50505050600061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180891906147c6565b90506000819050600061189161013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906147c6565b61361c565b905060008060008084871115611a40576118ab8588614961565b9150600061013e5461013d54896118c29190614974565b6118cc919061498b565b905080831161190a5760405162461bcd60e51b815260206004820152600a6024820152694f7261636c654c6f737360b01b6044820152606401610b54565b6101405461013f5461191c908a614974565b611926919061498b565b611930908461494e565b925061193b8361305d565b92508a1561195b5761194c836149ad565b98505050505050505050610fd0565b60408a015115611a3a5761013c5461012f5460405163645a5a9760e01b81526001600160a01b039283169263645a5a979261199e928f9289921690600401614a58565b600060405180830381600087803b1580156119b857600080fd5b505af11580156119cc573d6000803e3d6000fd5b5050505061012f60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b505050505b50611e22565b611ae2620186a061012f60009054906101000a90046001600160a01b03166001600160a01b0316634953bd076040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf91906147c6565b611ac98a89614961565b611ad39190614974565b611add919061498b565b61305d565b92508915611af95782975050505050505050610fd0565b600083118015611b0c5750604089015115155b15611c1c5761012f54604051632e1a7d4d60e01b8152600481018590526001600160a01b0390911690632e1a7d4d9060240160408051808303816000875af1158015611b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8091906147df565b505061012e5461013c54611ba1916001600160a01b039081169116856132fa565b61013c54604051631465a44d60e11b81526001600160a01b03909116906328cb489a90611bd4908c908790600401614a8b565b600060405180830381600087803b158015611bee57600080fd5b505af1158015611c02573d6000803e3d6000fd5b50505050611c0f8361361c565b611c199086614961565b94505b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9491906147c6565b611ca1620f424087614974565b611cab919061498b565b90508061013b541015611e225761013b54600090611ccc620f424088614974565b611cd6919061498b565b905061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5091906147c6565b611d5a9082614961565b610141549095506001600160a01b0316611db65760405162461bcd60e51b815260206004820152601f60248201527f70726f666974526563697069656e742061646472657373206973207a65726f006044820152606401610b54565b61012d54610141546040516340c10f1960e01b81526001600160a01b039182166004820152602481018890529116906340c10f1990604401600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b50505050505b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9a91906147c6565b9650611ef361013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611868573d6000803e3d6000fd5b945086851015611f375760405162461bcd60e51b815260206004820152600f60248201526e6e656761746976652072656261736560881b6044820152606401610b54565b6000611f438887614961565b9050600085611f52838a61494e565b611f5c919061494e565b61012d546040516339a7919f60e01b8152600481018a905291925060009182916001600160a01b0316906339a7919f906024016000604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd69190810190614aad565b6101385491935091506001600160a01b0316156120c35761012d54610138546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b15801561203f57600080fd5b505af1158015612053573d6000803e3d6000fd5b50506101385461012d546040516301b1d84d60e11b81526001600160a01b039283169450630363b09a935061209092909116908690600401614bd5565b600060405180830381600087803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b505050505b61012d54604080516318160ddd60e01b815290518b926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213191906147c6565b1461216d5760405162461bcd60e51b815260206004820152600c60248201526b3a37ba30b610109e903730bb60a11b6044820152606401610b54565b61012d54604080516318160ddd60e01b8152905185926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156121b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121db91906147c6565b1461221c5760405162461bcd60e51b81526020600482015260116024820152701d1bdd185b08084f48195e1c1958dd1959607a1b6044820152606401610b54565b604080518581526000602082015290810189905260608101889052608081018790527f8dd3783ac3ed2cabfce0fa4347c2cab93b8273171a7e30b28a83147b099c40389060a00160405180910390a15b610137546101355461227e9190614961565b421061229f576101365461013554612296919061494e565b6101355561226c565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c4610135546040516122d391815260200190565b60405180910390a150506001610144555060009b9a5050505050505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123955760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b54565b50600080516020614f5283398151915290565b6123b3600033612742565b6123cf5760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166123f55760405162461bcd60e51b8152600401610b5490614901565b61013c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f85a0f0b1d49c1f8eb76d236b1f5cdbb4acb94862ea575640d7399ae8530b076090602001610b8f565b61244f600033612742565b61246b5760405162461bcd60e51b8152600401610b54906148d3565b61013880546001600160a01b0319166001600160a01b0383169081179091556040519081527f8e0ccc7f4e6827cf2d4ab435db02892d906e1e85ddc84fd35945393baad24cef90602001610b8f565b600054610100900460ff16158080156124da5750600054600160ff909116105b806124f45750303b1580156124f4575060005460ff166001145b6125575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b54565b6000805460ff19166001179055801561257a576000805461ff0019166101001790555b612582613761565b61258a613788565b612592613761565b61259d600033613367565b6028610131819055620186a0610132819055610133919091556101348190556361959780610135556201518061013681905561013755620f439e61013b5561013e819055610140558015611267576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a8919061473b565b6126c45760405162461bcd60e51b8152600401610b5490614758565b6113ab6137b7565b6126d7600033612742565b6126f35760405162461bcd60e51b8152600401610b54906148d3565b61014280546001600160a01b0319166001600160a01b0383169081179091556040519081527f2836b367ff6dd5ad0072110d2cabfe7150e1dd4e4571aefaacb20936a2fa2d6a90602001610b8f565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000612777613017565b6002610144540361279a5760405162461bcd60e51b8152600401610b549061478f565b600261014455610fd06127b06020840184614452565b60208401356127c26040860186614c69565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137f492505050565b612807600033612742565b6128235760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166128495760405162461bcd60e51b8152600401610b5490614901565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612919919061473b565b6129355760405162461bcd60e51b8152600401610b5490614758565b806000036129555760405162461bcd60e51b8152600401610b5490614804565b818110156129995760405162461bcd60e51b81526020600482015260116024820152703332b2901f103232b737b6b4b730ba37b960791b6044820152606401610b54565b61013382905561013481905560408051838152602081018390527f9fb7dbd1f2c1bd33dd68f78a38f699ff1ca487d7a7211ecc7df31d919f52043d91016110d7565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c919061473b565b612a785760405162461bcd60e51b8152600401610b5490614758565b80600003612a985760405162461bcd60e51b8152600401610b5490614804565b61013f82905561014081905560408051838152602081018390527f40406e80205f7a30d291067fc0c9c2b1c8715c2e7e8941c5d49feb4dc64f049b91016110d7565b612ae5600033612742565b612b015760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b038216612b275760405162461bcd60e51b8152600401610b5490614901565b6001600160a01b038116612b4d5760405162461bcd60e51b8152600401610b5490614901565b61012d80546001600160a01b038481166001600160a01b0319928316811790935561012e80549185169190921681179091556040805192835260208301919091527fdcc6331013de89f8c595d5328f0a724194f113cb6f8f2a707b3dff6de13f0d1791016110d7565b6000612bc0613017565b60026101445403612be35760405162461bcd60e51b8152600401610b549061478f565b600261014481905550612c068383604051806020016040528060008152506137f4565b6001610144559392505050565b600082815260656020526040902060010154612c2e8161335d565b61110883836133ed565b612c43600033612742565b612c5f5760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b038116612c855760405162461bcd60e51b8152600401610b5490614901565b61014380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c990602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d55919061473b565b612d715760405162461bcd60e51b8152600401610b5490614758565b82600003612dc15760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f7765646044820152606401610b54565b81600003612e115760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f77656400006044820152606401610b54565b808311612e7c5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b6064820152608401610b54565b61013583905561013682905561013781905560408051848152602081018490529081018290527f182705f356ea3bbbd12c7b4761586a554d391a7703345f81166bbe3f946444999060600160405180910390a1505050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f55919061473b565b612f715760405162461bcd60e51b8152600401610b5490614758565b80600003612f915760405162461bcd60e51b8152600401610b5490614804565b81811015612fd55760405162461bcd60e51b81526020600482015260116024820152703332b2901f103232b737b6b4b730ba37b960791b6044820152606401610b54565b61013182905561013281905560408051838152602081018390527f28e297c7c282931a994191b735b01eaf17558295f761512a7047f4e1b8dc3b0b91016110d7565b60fb5460ff16156113ab5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b54565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d89190614cb0565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131579190614cb0565b60ff1690508082111561318a5761316e8183614961565b61317990600a614db7565b6131839085614974565b93506131ac565b6131948282614961565b61319f90600a614db7565b6131a9908561498b565b93505b509192915050565b60008060008084156131cf57505061013154610132546131da565b505061013354610134545b6000816131e78489614974565b6131f1919061498b565b905060006131ff8289614961565b95509093505050505b9250929050565b610142546000906001600160a01b0316156132a35761014260009054906101000a90046001600160a01b03166001600160a01b031663f2c9ecd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c91906147c6565b90506132a6565b50435b81156132f3578061013954106132f35760405162461bcd60e51b81526020600482015260126024820152714f6e6c79206f6e636520696e20626c6f636b60701b6044820152606401610b54565b6101395550565b6040516001600160a01b03831660248201526044810182905261110890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c4a565b6112678133613d1c565b6133718282612742565b6111875760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6133f78282612742565b156111875760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111878161335d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156134925761110883613d75565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156134ec575060408051601f3d908101601f191682019092526134e9918101906147c6565b60015b61354f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610b54565b600080516020614f5283398151915281146135be5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610b54565b50611108838383613e11565b6135d2613e3c565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136979190614cb0565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137169190614cb0565b60ff169050808211156137425761372d8183614961565b61373890600a614db7565b613183908561498b565b61374c8282614961565b61375790600a614db7565b6131a99085614974565b600054610100900460ff166113ab5760405162461bcd60e51b8152600401610b5490614dc3565b600054610100900460ff166137af5760405162461bcd60e51b8152600401610b5490614dc3565b6113ab613e85565b6137bf613017565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586135ff3390565b61012e546000906001600160a01b038581169116146138555760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920617373657420617661696c61626c6520666f7220627579000000006044820152606401610b54565b61012e546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561389f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c391906147c6565b9050838110156139155760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320746f2062757900000000000000006044820152606401610b54565b6000841161395f5760405162461bcd60e51b8152602060048201526017602482015276416d6f756e74206f66206173736574206973207a65726f60481b6044820152606401610b54565b600061396a8561361c565b9050600081116139b55760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206f66205553442b206973207a65726f60501b6044820152606401610b54565b61012e5461012f546040516370a0823160e01b81526001600160a01b039182166004820152600092889216906370a0823190602401602060405180830381865afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b91906147c6565b613a35919061494e565b61012e5461012f54919250613a59916001600160a01b039182169133911689613eb8565b61012e5461012f546040516370a0823160e01b81526001600160a01b039182166004820152839291909116906370a0823190602401602060405180830381865afa158015613aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613acf91906147c6565b14613b135760405162461bcd60e51b81526020600482015260146024820152731c1b4818985b185b98d948084f481d185c99d95d60621b6044820152606401610b54565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613b6457600080fd5b505af1158015613b78573d6000803e3d6000fd5b50505050613b86600061320f565b600080613b948460016131b4565b61012d546040516340c10f1960e01b8152336004820152602481018490529194509192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015613be757600080fd5b505af1158015613bfb573d6000803e3d6000fd5b505050507f5215f03b099407f64e52d76ef2416a46b32915d572e87db5d40282538ed364848183338a604051613c349493929190614e0e565b60405180910390a19450505050505b9392505050565b6000613c9f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ef09092919063ffffffff16565b8051909150156111085780806020019051810190613cbd919061473b565b6111085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b54565b613d268282612742565b61118757613d3381613f07565b613d3e836020613f19565b604051602001613d4f929190614e60565b60408051601f198184030181529082905262461bcd60e51b8252610b5491600401614ed5565b6001600160a01b0381163b613de25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b54565b600080516020614f5283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613e1a836140b5565b600082511180613e275750805b1561110857613e3683836140f5565b50505050565b60fb5460ff166113ab5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b54565b600054610100900460ff16613eac5760405162461bcd60e51b8152600401610b5490614dc3565b60fb805460ff19169055565b6040516001600160a01b0380851660248301528316604482015260648101829052613e369085906323b872dd60e01b90608401613326565b6060613eff84846000856141e9565b949350505050565b6060610ab16001600160a01b03831660145b60606000613f28836002614974565b613f3390600261494e565b67ffffffffffffffff811115613f4b57613f4b61446f565b6040519080825280601f01601f191660200182016040528015613f75576020820181803683370190505b509050600360fc1b81600081518110613f9057613f90614ee8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613fbf57613fbf614ee8565b60200101906001600160f81b031916908160001a9053506000613fe3846002614974565b613fee90600161494e565b90505b6001811115614066576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061402257614022614ee8565b1a60f81b82828151811061403857614038614ee8565b60200101906001600160f81b031916908160001a90535060049490941c9361405f81614efe565b9050613ff1565b508315613c435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b54565b6140be81613d75565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61415d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610b54565b600080846001600160a01b0316846040516141789190614f15565b600060405180830381855af49150503d80600081146141b3576040519150601f19603f3d011682016040523d82523d6000602084013e6141b8565b606091505b50915091506141e08282604051806060016040528060278152602001614f72602791396142c4565b95945050505050565b60608247101561424a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b54565b600080866001600160a01b031685876040516142669190614f15565b60006040518083038185875af1925050503d80600081146142a3576040519150601f19603f3d011682016040523d82523d6000602084013e6142a8565b606091505b50915091506142b9878383876142dd565b979650505050505050565b606083156142d3575081613c43565b613c438383614352565b6060831561434c578251600003614345576001600160a01b0385163b6143455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b54565b5081613eff565b613eff83835b8151156143625781518083602001fd5b8060405162461bcd60e51b8152600401610b549190614ed5565b60006020828403121561438e57600080fd5b81356001600160e01b031981168114613c4357600080fd5b6000602082840312156143b857600080fd5b5035919050565b6001600160a01b038116811461126757600080fd5b600080604083850312156143e757600080fd5b82356143f2816143bf565b946020939093013593505050565b6000806040838503121561441357600080fd5b50508035926020909101359150565b6000806040838503121561443557600080fd5b823591506020830135614447816143bf565b809150509250929050565b60006020828403121561446457600080fd5b8135613c43816143bf565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156144a8576144a861446f565b60405290565b6040516060810167ffffffffffffffff811182821017156144a8576144a861446f565b604051610140810167ffffffffffffffff811182821017156144a8576144a861446f565b604051601f8201601f1916810167ffffffffffffffff8111828210171561451e5761451e61446f565b604052919050565b600082601f83011261453757600080fd5b813567ffffffffffffffff8111156145515761455161446f565b614564601f8201601f19166020016144f5565b81815284602083860101111561457957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156145a957600080fd5b82356145b4816143bf565b9150602083013567ffffffffffffffff8111156145d057600080fd5b6145dc85828601614526565b9150509250929050565b801515811461126757600080fd5b6000806040838503121561460757600080fd5b8235614612816145e6565b9150602083013567ffffffffffffffff8082111561462f57600080fd5b908401906080828703121561464357600080fd5b61464b614485565b8235614656816143bf565b81526020830135614666816143bf565b60208201526040838101359082015260608301358281111561468757600080fd5b61469388828601614526565b6060830152508093505050509250929050565b6000602082840312156146b857600080fd5b813567ffffffffffffffff8111156146cf57600080fd5b820160608185031215613c4357600080fd5b600080604083850312156146f457600080fd5b82356146ff816143bf565b91506020830135614447816143bf565b60008060006060848603121561472457600080fd5b505081359360208301359350604090920135919050565b60006020828403121561474d57600080fd5b8151613c43816145e6565b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156147d857600080fd5b5051919050565b600080604083850312156147f257600080fd5b825191506020830151614447816145e6565b6020808252601c908201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ab157610ab1614938565b81810381811115610ab157610ab1614938565b8082028115828204841417610ab157610ab1614938565b6000826149a857634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b82016149c2576149c2614938565b5060000390565b60005b838110156149e45781810151838201526020016149cc565b50506000910152565b60008151808452614a058160208601602086016149c9565b601f01601f19169290920160200192915050565b600060018060a01b038083511684528060208401511660208501525060408201516040840152606082015160806060850152613eff60808501826149ed565b606081526000614a6b6060830186614a19565b6020830194909452506001600160a01b0391909116604090910152919050565b604081526000614a9e6040830185614a19565b90508260208301529392505050565b6000806040808486031215614ac157600080fd5b835167ffffffffffffffff80821115614ad957600080fd5b818601915086601f830112614aed57600080fd5b8151602082821115614b0157614b0161446f565b614b0f818360051b016144f5565b828152818101935061018092830285018201928a841115614b2f57600080fd5b948201945b83861015614bc45780868c031215614b4c5760008081fd5b614b546144ae565b8651614b5f816143bf565b81528684015184820152605f87018c13614b795760008081fd5b614b816144d1565b808389018e811115614b935760008081fd5b8a8a015b81811015614bae5780518452928701928701614b97565b5050828a01525085529485019493820193614b34565b509701519698969750505050505050565b6001600160a01b038381168252604060208084018290528451848301819052600093868301929091606087019086805b82811015614c595786518051871685528581015186860152880151888501835b600a811015614c4257825182529187019190870190600101614c25565b505050958401956101809390930192600101614c05565b50919a9950505050505050505050565b6000808335601e19843603018112614c8057600080fd5b83018035915067ffffffffffffffff821115614c9b57600080fd5b60200191503681900382131561320857600080fd5b600060208284031215614cc257600080fd5b815160ff81168114613c4357600080fd5b600181815b80851115614d0e578160001904821115614cf457614cf4614938565b80851615614d0157918102915b93841c9390800290614cd8565b509250929050565b600082614d2557506001610ab1565b81614d3257506000610ab1565b8160018114614d485760028114614d5257614d6e565b6001915050610ab1565b60ff841115614d6357614d63614938565b50506001821b610ab1565b5060208310610133831016604e8410600b8410161715614d91575081810a610ab1565b614d9b8383614cd3565b8060001904821115614daf57614daf614938565b029392505050565b6000613c438383614d16565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60a08152600460a0820152631b5a5b9d60e21b60c082015284602082015283604082015260018060a01b038316606082015260e060808201526000614e5660e08301846149ed565b9695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e988160178501602088016149c9565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614ec98160288401602088016149c9565b01602801949350505050565b602081526000613c4360208301846149ed565b634e487b7160e01b600052603260045260246000fd5b600081614f0d57614f0d614938565b506000190190565b60008251614f278184602087016149c9565b919091019291505056fed67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122012328d83eaef79a632f4c4262c2691a821ab38a7795af9b847eeba44b4f03e1c64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061038b5760003560e01c80636cd7751f116101dc578063a440b21a11610102578063cecbbc07116100a0578063f1d588c51161006f578063f1d588c5146109ff578063f3869e8d14610a1f578063f695169314610a3f578063fb0ecfa414610a6057600080fd5b8063cecbbc071461099a578063d31a1934146109b1578063d547741f146109c8578063e3d9fc28146109e857600080fd5b8063c12e90e9116100dc578063c12e90e91461092c578063cbc7854e14610943578063cce7ec1314610963578063ce1aa76b1461098357600080fd5b8063a440b21a146108cc578063bc56bebf146108ec578063bd2160c21461090c57600080fd5b80638456cb591161017a5780639629300c116101495780639629300c14610869578063965fa21e146108895780639d70c129146108a0578063a217fddf146108b757600080fd5b80638456cb59146107f357806389cf3204146108085780638c754ef11461082957806391d148541461084957600080fd5b8063771d147e116101b6578063771d147e1461078f5780637c5261d8146107a65780637e2bad1e146107bd5780638129fc1c146107de57600080fd5b80636cd7751f146107385780636d8ebaa8146107585780637181896f1461076f57600080fd5b80633659cfe6116102c15780634f1ef2861161025f5780635c975abb1161022e5780635c975abb146106c65780635dbd733a146106de578063620b75df1461070057806362f098951461072157600080fd5b80634f1ef2861461065d578063514e460a1461067057806351b4925c1461069157806352d1902d146106b157600080fd5b80633f4ba83a1161029b5780633f4ba83a146105dd57806347062402146105f25780634795084f14610609578063497d91921461062957600080fd5b80633659cfe61461057c578063370447711461059c5780633e413bee146105bc57600080fd5b806325990d631161032e5780632f2ff15d116103085780632f2ff15d146104fa578063302056031461051a5780633083a8e31461053b57806336568abe1461055c57600080fd5b806325990d63146104ac5780632b78fe78146104c35780632d8cc004146104da57600080fd5b80631346c9e71161036a5780631346c9e7146104205780631e9a695014610445578063248a9ca3146104655780632552317c1461049557600080fd5b8062435da51461039057806301ffc9a7146103ce578063085cffc1146103fe575b600080fd5b34801561039c57600080fd5b50610143546103b1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103da57600080fd5b506103ee6103e936600461437c565b610a80565b60405190151581526020016103c5565b34801561040a57600080fd5b5061041e6104193660046143a6565b610ab7565b005b34801561042c57600080fd5b506104376101405481565b6040519081526020016103c5565b34801561045157600080fd5b506104376104603660046143d4565b610b9a565b34801561047157600080fd5b506104376104803660046143a6565b60009081526065602052604090206001015490565b3480156104a157600080fd5b506104376101395481565b3480156104b857600080fd5b5061043761013f5481565b3480156104cf57600080fd5b5061043761013a5481565b3480156104e657600080fd5b5061041e6104f5366004614400565b610fdc565b34801561050657600080fd5b5061041e610515366004614422565b6110e3565b34801561052657600080fd5b50610142546103b1906001600160a01b031681565b34801561054757600080fd5b50610138546103b1906001600160a01b031681565b34801561056857600080fd5b5061041e610577366004614422565b61110d565b34801561058857600080fd5b5061041e610597366004614452565b61118b565b3480156105a857600080fd5b5061041e6105b7366004614452565b61126a565b3480156105c857600080fd5b5061012e546103b1906001600160a01b031681565b3480156105e957600080fd5b5061041e611306565b3480156105fe57600080fd5b506104376101315481565b34801561061557600080fd5b5061041e610624366004614452565b6113ad565b34801561063557600080fd5b506104377fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d781565b61041e61066b366004614596565b611449565b34801561067c57600080fd5b5061012d546103b1906001600160a01b031681565b34801561069d57600080fd5b506104376106ac3660046145f4565b611515565b3480156106bd57600080fd5b506104376122f5565b3480156106d257600080fd5b5060fb5460ff166103ee565b3480156106ea57600080fd5b50610437600080516020614f3283398151915281565b34801561070c57600080fd5b5061012f546103b1906001600160a01b031681565b34801561072d57600080fd5b506104376101325481565b34801561074457600080fd5b5061041e610753366004614452565b6123a8565b34801561076457600080fd5b506104376101355481565b34801561077b57600080fd5b5061041e61078a366004614452565b612444565b34801561079b57600080fd5b50610437620186a081565b3480156107b257600080fd5b5061043761013b5481565b3480156107c957600080fd5b50610141546103b1906001600160a01b031681565b3480156107ea57600080fd5b5061041e6124ba565b3480156107ff57600080fd5b5061041e612627565b34801561081457600080fd5b5061013c546103b1906001600160a01b031681565b34801561083557600080fd5b5061041e610844366004614452565b6126cc565b34801561085557600080fd5b506103ee610864366004614422565b612742565b34801561087557600080fd5b506104376108843660046146a6565b61276d565b34801561089557600080fd5b506104376101335481565b3480156108ac57600080fd5b5061043761013e5481565b3480156108c357600080fd5b50610437600081565b3480156108d857600080fd5b5061041e6108e7366004614452565b6127fc565b3480156108f857600080fd5b5061041e610907366004614400565b612898565b34801561091857600080fd5b5061041e610927366004614400565b6129db565b34801561093857600080fd5b506104376101345481565b34801561094f57600080fd5b5061041e61095e3660046146e1565b612ada565b34801561096f57600080fd5b5061043761097e3660046143d4565b612bb6565b34801561098f57600080fd5b506104376101365481565b3480156109a657600080fd5b506104376101375481565b3480156109bd57600080fd5b50610437620f424081565b3480156109d457600080fd5b5061041e6109e3366004614422565b612c13565b3480156109f457600080fd5b5061043761013d5481565b348015610a0b57600080fd5b5061041e610a1a366004614452565b612c38565b348015610a2b57600080fd5b5061041e610a3a36600461470f565b612cd4565b348015610a4b57600080fd5b50610130546103b1906001600160a01b031681565b348015610a6c57600080fd5b5061041e610a7b366004614400565b612ed4565b60006001600160e01b03198216637965db0b60e01b1480610ab157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b38919061473b565b610b5d5760405162461bcd60e51b8152600401610b5490614758565b60405180910390fd5b61013b8190556040518181527faa9ef91f649f41f8a2d45738d2989c61c58e0e77af8222f8246cba1bf391d93a906020015b60405180910390a150565b6000610ba4613017565b60026101445403610bc75760405162461bcd60e51b8152600401610b549061478f565b60026101445561012e546001600160a01b03848116911614610c2b5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920617373657420617661696c61626c6520666f722072656465656d006044820152606401610b54565b60008211610c745760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206f66205553442b206973207a65726f60501b6044820152606401610b54565b61012d546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce191906147c6565b1015610d2f5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d00000000006044820152606401610b54565b6000610d3a8361305d565b905060008111610d865760405162461bcd60e51b8152602060048201526017602482015276416d6f756e74206f66206173736574206973207a65726f60481b6044820152606401610b54565b600080610d948360006131b4565b61012f54604051632e1a7d4d60e01b8152600481018490529194509192506000916001600160a01b031690632e1a7d4d9060240160408051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906147df565b915050610e168161320f565b61012d54604051632770a7eb60e21b8152336004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505061012e546040516370a0823160e01b81523060048201528593506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906147c6565b1015610f445760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820666f72207472616e736665722072656465656d416d6044820152631bdd5b9d60e21b6064820152608401610b54565b61012e54610f5c906001600160a01b031633846132fa565b6040805160a08082526006908201526572656465656d60d01b60c08201526020810184905290810184905233606082015260e0608082018190526000908201527f5215f03b099407f64e52d76ef2416a46b32915d572e87db5d40282538ed36484906101000160405180910390a150925050505b60016101445592915050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d919061473b565b6110795760405162461bcd60e51b8152600401610b5490614758565b806000036110995760405162461bcd60e51b8152600401610b5490614804565b61013d82905561013e81905560408051838152602081018390527ffd477784a91e10a1a8ac1832d94895eef49a29940452ad3635cc3e8eab77e4b791015b60405180910390a15050565b6000828152606560205260409020600101546110fe8161335d565b6111088383613367565b505050565b6001600160a01b038116331461117d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b54565b61118782826133ed565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111d35760405162461bcd60e51b8152600401610b549061483b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661121c600080516020614f52833981519152546001600160a01b031690565b6001600160a01b0316146112425760405162461bcd60e51b8152600401610b5490614887565b61124b81613454565b604080516000808252602082019092526112679183919061345f565b50565b611275600033612742565b6112915760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166112b75760405162461bcd60e51b8152600401610b5490614901565b61013080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd90602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611387919061473b565b6113a35760405162461bcd60e51b8152600401610b5490614758565b6113ab6135ca565b565b6113b8600033612742565b6113d45760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166113fa5760405162461bcd60e51b8152600401610b5490614901565b61014180546001600160a01b0319166001600160a01b0383169081179091556040519081527f97519908572e1d17b754081a3fd2ac67644cf8cda617d672983db516e2308e7c90602001610b8f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114915760405162461bcd60e51b8152600401610b549061483b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114da600080516020614f52833981519152546001600160a01b031690565b6001600160a01b0316146115005760405162461bcd60e51b8152600401610b5490614887565b61150982613454565b6111878282600161345f565b600061151f613017565b61014354604051632474521560e21b81527fede8101501d89b9894e78e4f219420b6ddb840e8e75dde35741a0745408476d760048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b2919061473b565b6115f35760405162461bcd60e51b815260206004820152601260248201527114995cdd1c9a58dd1959081d1bc8155b9a5d60721b6044820152606401610b54565b600261014454036116165760405162461bcd60e51b8152600401610b549061478f565b600261014455610138546001600160a01b03161515806116ab575061012d60009054906101000a90046001600160a01b03166001600160a01b031663767b479c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a991906147c6565b155b6117055760405162461bcd60e51b815260206004820152602560248201527f4e65656420746f2073706563696679207061796f75744d616e61676572206164604482015264647265737360d81b6064820152608401610b54565b6101355461013754611717904261494e565b101561172557506000610fd0565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c6bbf4cb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b50505050600061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180891906147c6565b90506000819050600061189161013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906147c6565b61361c565b905060008060008084871115611a40576118ab8588614961565b9150600061013e5461013d54896118c29190614974565b6118cc919061498b565b905080831161190a5760405162461bcd60e51b815260206004820152600a6024820152694f7261636c654c6f737360b01b6044820152606401610b54565b6101405461013f5461191c908a614974565b611926919061498b565b611930908461494e565b925061193b8361305d565b92508a1561195b5761194c836149ad565b98505050505050505050610fd0565b60408a015115611a3a5761013c5461012f5460405163645a5a9760e01b81526001600160a01b039283169263645a5a979261199e928f9289921690600401614a58565b600060405180830381600087803b1580156119b857600080fd5b505af11580156119cc573d6000803e3d6000fd5b5050505061012f60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b505050505b50611e22565b611ae2620186a061012f60009054906101000a90046001600160a01b03166001600160a01b0316634953bd076040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf91906147c6565b611ac98a89614961565b611ad39190614974565b611add919061498b565b61305d565b92508915611af95782975050505050505050610fd0565b600083118015611b0c5750604089015115155b15611c1c5761012f54604051632e1a7d4d60e01b8152600481018590526001600160a01b0390911690632e1a7d4d9060240160408051808303816000875af1158015611b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8091906147df565b505061012e5461013c54611ba1916001600160a01b039081169116856132fa565b61013c54604051631465a44d60e11b81526001600160a01b03909116906328cb489a90611bd4908c908790600401614a8b565b600060405180830381600087803b158015611bee57600080fd5b505af1158015611c02573d6000803e3d6000fd5b50505050611c0f8361361c565b611c199086614961565b94505b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9491906147c6565b611ca1620f424087614974565b611cab919061498b565b90508061013b541015611e225761013b54600090611ccc620f424088614974565b611cd6919061498b565b905061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5091906147c6565b611d5a9082614961565b610141549095506001600160a01b0316611db65760405162461bcd60e51b815260206004820152601f60248201527f70726f666974526563697069656e742061646472657373206973207a65726f006044820152606401610b54565b61012d54610141546040516340c10f1960e01b81526001600160a01b039182166004820152602481018890529116906340c10f1990604401600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b50505050505b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9a91906147c6565b9650611ef361013060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611868573d6000803e3d6000fd5b945086851015611f375760405162461bcd60e51b815260206004820152600f60248201526e6e656761746976652072656261736560881b6044820152606401610b54565b6000611f438887614961565b9050600085611f52838a61494e565b611f5c919061494e565b61012d546040516339a7919f60e01b8152600481018a905291925060009182916001600160a01b0316906339a7919f906024016000604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd69190810190614aad565b6101385491935091506001600160a01b0316156120c35761012d54610138546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b15801561203f57600080fd5b505af1158015612053573d6000803e3d6000fd5b50506101385461012d546040516301b1d84d60e11b81526001600160a01b039283169450630363b09a935061209092909116908690600401614bd5565b600060405180830381600087803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b505050505b61012d54604080516318160ddd60e01b815290518b926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213191906147c6565b1461216d5760405162461bcd60e51b815260206004820152600c60248201526b3a37ba30b610109e903730bb60a11b6044820152606401610b54565b61012d54604080516318160ddd60e01b8152905185926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156121b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121db91906147c6565b1461221c5760405162461bcd60e51b81526020600482015260116024820152701d1bdd185b08084f48195e1c1958dd1959607a1b6044820152606401610b54565b604080518581526000602082015290810189905260608101889052608081018790527f8dd3783ac3ed2cabfce0fa4347c2cab93b8273171a7e30b28a83147b099c40389060a00160405180910390a15b610137546101355461227e9190614961565b421061229f576101365461013554612296919061494e565b6101355561226c565b7f6654b7187a0560c4c326844142156c2adf52738d0a615487e0e2a5cd9823c2c4610135546040516122d391815260200190565b60405180910390a150506001610144555060009b9a5050505050505050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123955760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b54565b50600080516020614f5283398151915290565b6123b3600033612742565b6123cf5760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166123f55760405162461bcd60e51b8152600401610b5490614901565b61013c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f85a0f0b1d49c1f8eb76d236b1f5cdbb4acb94862ea575640d7399ae8530b076090602001610b8f565b61244f600033612742565b61246b5760405162461bcd60e51b8152600401610b54906148d3565b61013880546001600160a01b0319166001600160a01b0383169081179091556040519081527f8e0ccc7f4e6827cf2d4ab435db02892d906e1e85ddc84fd35945393baad24cef90602001610b8f565b600054610100900460ff16158080156124da5750600054600160ff909116105b806124f45750303b1580156124f4575060005460ff166001145b6125575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b54565b6000805460ff19166001179055801561257a576000805461ff0019166101001790555b612582613761565b61258a613788565b612592613761565b61259d600033613367565b6028610131819055620186a0610132819055610133919091556101348190556361959780610135556201518061013681905561013755620f439e61013b5561013e819055610140558015611267576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a8919061473b565b6126c45760405162461bcd60e51b8152600401610b5490614758565b6113ab6137b7565b6126d7600033612742565b6126f35760405162461bcd60e51b8152600401610b54906148d3565b61014280546001600160a01b0319166001600160a01b0383169081179091556040519081527f2836b367ff6dd5ad0072110d2cabfe7150e1dd4e4571aefaacb20936a2fa2d6a90602001610b8f565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000612777613017565b6002610144540361279a5760405162461bcd60e51b8152600401610b549061478f565b600261014455610fd06127b06020840184614452565b60208401356127c26040860186614c69565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137f492505050565b612807600033612742565b6128235760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b0381166128495760405162461bcd60e51b8152600401610b5490614901565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb790602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612919919061473b565b6129355760405162461bcd60e51b8152600401610b5490614758565b806000036129555760405162461bcd60e51b8152600401610b5490614804565b818110156129995760405162461bcd60e51b81526020600482015260116024820152703332b2901f103232b737b6b4b730ba37b960791b6044820152606401610b54565b61013382905561013481905560408051838152602081018390527f9fb7dbd1f2c1bd33dd68f78a38f699ff1ca487d7a7211ecc7df31d919f52043d91016110d7565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c919061473b565b612a785760405162461bcd60e51b8152600401610b5490614758565b80600003612a985760405162461bcd60e51b8152600401610b5490614804565b61013f82905561014081905560408051838152602081018390527f40406e80205f7a30d291067fc0c9c2b1c8715c2e7e8941c5d49feb4dc64f049b91016110d7565b612ae5600033612742565b612b015760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b038216612b275760405162461bcd60e51b8152600401610b5490614901565b6001600160a01b038116612b4d5760405162461bcd60e51b8152600401610b5490614901565b61012d80546001600160a01b038481166001600160a01b0319928316811790935561012e80549185169190921681179091556040805192835260208301919091527fdcc6331013de89f8c595d5328f0a724194f113cb6f8f2a707b3dff6de13f0d1791016110d7565b6000612bc0613017565b60026101445403612be35760405162461bcd60e51b8152600401610b549061478f565b600261014481905550612c068383604051806020016040528060008152506137f4565b6001610144559392505050565b600082815260656020526040902060010154612c2e8161335d565b61110883836133ed565b612c43600033612742565b612c5f5760405162461bcd60e51b8152600401610b54906148d3565b6001600160a01b038116612c855760405162461bcd60e51b8152600401610b5490614901565b61014380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c990602001610b8f565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d55919061473b565b612d715760405162461bcd60e51b8152600401610b5490614758565b82600003612dc15760405162461bcd60e51b815260206004820181905260248201527f5a65726f205f6e6578745061796f757454696d65206e6f7420616c6c6f7765646044820152606401610b54565b81600003612e115760405162461bcd60e51b815260206004820152601e60248201527f5a65726f205f7061796f7574506572696f64206e6f7420616c6c6f77656400006044820152606401610b54565b808311612e7c5760405162461bcd60e51b815260206004820152603360248201527f5f6e6578745061796f757454696d652073686f7564206265206d6f7265207468604482015272616e205f7061796f757454696d6552616e676560681b6064820152608401610b54565b61013583905561013682905561013781905560408051848152602081018490529081018290527f182705f356ea3bbbd12c7b4761586a554d391a7703345f81166bbe3f946444999060600160405180910390a1505050565b61014354604051632474521560e21b8152600080516020614f3283398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015612f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f55919061473b565b612f715760405162461bcd60e51b8152600401610b5490614758565b80600003612f915760405162461bcd60e51b8152600401610b5490614804565b81811015612fd55760405162461bcd60e51b81526020600482015260116024820152703332b2901f103232b737b6b4b730ba37b960791b6044820152606401610b54565b61013182905561013281905560408051838152602081018390527f28e297c7c282931a994191b735b01eaf17558295f761512a7047f4e1b8dc3b0b91016110d7565b60fb5460ff16156113ab5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b54565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d89190614cb0565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131579190614cb0565b60ff1690508082111561318a5761316e8183614961565b61317990600a614db7565b6131839085614974565b93506131ac565b6131948282614961565b61319f90600a614db7565b6131a9908561498b565b93505b509192915050565b60008060008084156131cf57505061013154610132546131da565b505061013354610134545b6000816131e78489614974565b6131f1919061498b565b905060006131ff8289614961565b95509093505050505b9250929050565b610142546000906001600160a01b0316156132a35761014260009054906101000a90046001600160a01b03166001600160a01b031663f2c9ecd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c91906147c6565b90506132a6565b50435b81156132f3578061013954106132f35760405162461bcd60e51b81526020600482015260126024820152714f6e6c79206f6e636520696e20626c6f636b60701b6044820152606401610b54565b6101395550565b6040516001600160a01b03831660248201526044810182905261110890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613c4a565b6112678133613d1c565b6133718282612742565b6111875760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6133f78282612742565b156111875760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111878161335d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156134925761110883613d75565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156134ec575060408051601f3d908101601f191682019092526134e9918101906147c6565b60015b61354f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610b54565b600080516020614f5283398151915281146135be5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610b54565b50611108838383613e11565b6135d2613e3c565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136979190614cb0565b60ff169050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137169190614cb0565b60ff169050808211156137425761372d8183614961565b61373890600a614db7565b613183908561498b565b61374c8282614961565b61375790600a614db7565b6131a99085614974565b600054610100900460ff166113ab5760405162461bcd60e51b8152600401610b5490614dc3565b600054610100900460ff166137af5760405162461bcd60e51b8152600401610b5490614dc3565b6113ab613e85565b6137bf613017565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586135ff3390565b61012e546000906001600160a01b038581169116146138555760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920617373657420617661696c61626c6520666f7220627579000000006044820152606401610b54565b61012e546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561389f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c391906147c6565b9050838110156139155760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320746f2062757900000000000000006044820152606401610b54565b6000841161395f5760405162461bcd60e51b8152602060048201526017602482015276416d6f756e74206f66206173736574206973207a65726f60481b6044820152606401610b54565b600061396a8561361c565b9050600081116139b55760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206f66205553442b206973207a65726f60501b6044820152606401610b54565b61012e5461012f546040516370a0823160e01b81526001600160a01b039182166004820152600092889216906370a0823190602401602060405180830381865afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b91906147c6565b613a35919061494e565b61012e5461012f54919250613a59916001600160a01b039182169133911689613eb8565b61012e5461012f546040516370a0823160e01b81526001600160a01b039182166004820152839291909116906370a0823190602401602060405180830381865afa158015613aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613acf91906147c6565b14613b135760405162461bcd60e51b81526020600482015260146024820152731c1b4818985b185b98d948084f481d185c99d95d60621b6044820152606401610b54565b61012f60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613b6457600080fd5b505af1158015613b78573d6000803e3d6000fd5b50505050613b86600061320f565b600080613b948460016131b4565b61012d546040516340c10f1960e01b8152336004820152602481018490529194509192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015613be757600080fd5b505af1158015613bfb573d6000803e3d6000fd5b505050507f5215f03b099407f64e52d76ef2416a46b32915d572e87db5d40282538ed364848183338a604051613c349493929190614e0e565b60405180910390a19450505050505b9392505050565b6000613c9f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ef09092919063ffffffff16565b8051909150156111085780806020019051810190613cbd919061473b565b6111085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b54565b613d268282612742565b61118757613d3381613f07565b613d3e836020613f19565b604051602001613d4f929190614e60565b60408051601f198184030181529082905262461bcd60e51b8252610b5491600401614ed5565b6001600160a01b0381163b613de25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b54565b600080516020614f5283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613e1a836140b5565b600082511180613e275750805b1561110857613e3683836140f5565b50505050565b60fb5460ff166113ab5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b54565b600054610100900460ff16613eac5760405162461bcd60e51b8152600401610b5490614dc3565b60fb805460ff19169055565b6040516001600160a01b0380851660248301528316604482015260648101829052613e369085906323b872dd60e01b90608401613326565b6060613eff84846000856141e9565b949350505050565b6060610ab16001600160a01b03831660145b60606000613f28836002614974565b613f3390600261494e565b67ffffffffffffffff811115613f4b57613f4b61446f565b6040519080825280601f01601f191660200182016040528015613f75576020820181803683370190505b509050600360fc1b81600081518110613f9057613f90614ee8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613fbf57613fbf614ee8565b60200101906001600160f81b031916908160001a9053506000613fe3846002614974565b613fee90600161494e565b90505b6001811115614066576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061402257614022614ee8565b1a60f81b82828151811061403857614038614ee8565b60200101906001600160f81b031916908160001a90535060049490941c9361405f81614efe565b9050613ff1565b508315613c435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b54565b6140be81613d75565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61415d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610b54565b600080846001600160a01b0316846040516141789190614f15565b600060405180830381855af49150503d80600081146141b3576040519150601f19603f3d011682016040523d82523d6000602084013e6141b8565b606091505b50915091506141e08282604051806060016040528060278152602001614f72602791396142c4565b95945050505050565b60608247101561424a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b54565b600080866001600160a01b031685876040516142669190614f15565b60006040518083038185875af1925050503d80600081146142a3576040519150601f19603f3d011682016040523d82523d6000602084013e6142a8565b606091505b50915091506142b9878383876142dd565b979650505050505050565b606083156142d3575081613c43565b613c438383614352565b6060831561434c578251600003614345576001600160a01b0385163b6143455760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b54565b5081613eff565b613eff83835b8151156143625781518083602001fd5b8060405162461bcd60e51b8152600401610b549190614ed5565b60006020828403121561438e57600080fd5b81356001600160e01b031981168114613c4357600080fd5b6000602082840312156143b857600080fd5b5035919050565b6001600160a01b038116811461126757600080fd5b600080604083850312156143e757600080fd5b82356143f2816143bf565b946020939093013593505050565b6000806040838503121561441357600080fd5b50508035926020909101359150565b6000806040838503121561443557600080fd5b823591506020830135614447816143bf565b809150509250929050565b60006020828403121561446457600080fd5b8135613c43816143bf565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156144a8576144a861446f565b60405290565b6040516060810167ffffffffffffffff811182821017156144a8576144a861446f565b604051610140810167ffffffffffffffff811182821017156144a8576144a861446f565b604051601f8201601f1916810167ffffffffffffffff8111828210171561451e5761451e61446f565b604052919050565b600082601f83011261453757600080fd5b813567ffffffffffffffff8111156145515761455161446f565b614564601f8201601f19166020016144f5565b81815284602083860101111561457957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156145a957600080fd5b82356145b4816143bf565b9150602083013567ffffffffffffffff8111156145d057600080fd5b6145dc85828601614526565b9150509250929050565b801515811461126757600080fd5b6000806040838503121561460757600080fd5b8235614612816145e6565b9150602083013567ffffffffffffffff8082111561462f57600080fd5b908401906080828703121561464357600080fd5b61464b614485565b8235614656816143bf565b81526020830135614666816143bf565b60208201526040838101359082015260608301358281111561468757600080fd5b61469388828601614526565b6060830152508093505050509250929050565b6000602082840312156146b857600080fd5b813567ffffffffffffffff8111156146cf57600080fd5b820160608185031215613c4357600080fd5b600080604083850312156146f457600080fd5b82356146ff816143bf565b91506020830135614447816143bf565b60008060006060848603121561472457600080fd5b505081359360208301359350604090920135919050565b60006020828403121561474d57600080fd5b8151613c43816145e6565b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156147d857600080fd5b5051919050565b600080604083850312156147f257600080fd5b825191506020830151614447816145e6565b6020808252601c908201527f5a65726f2064656e6f6d696e61746f72206e6f7420616c6c6f77656400000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ab157610ab1614938565b81810381811115610ab157610ab1614938565b8082028115828204841417610ab157610ab1614938565b6000826149a857634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b82016149c2576149c2614938565b5060000390565b60005b838110156149e45781810151838201526020016149cc565b50506000910152565b60008151808452614a058160208601602086016149c9565b601f01601f19169290920160200192915050565b600060018060a01b038083511684528060208401511660208501525060408201516040840152606082015160806060850152613eff60808501826149ed565b606081526000614a6b6060830186614a19565b6020830194909452506001600160a01b0391909116604090910152919050565b604081526000614a9e6040830185614a19565b90508260208301529392505050565b6000806040808486031215614ac157600080fd5b835167ffffffffffffffff80821115614ad957600080fd5b818601915086601f830112614aed57600080fd5b8151602082821115614b0157614b0161446f565b614b0f818360051b016144f5565b828152818101935061018092830285018201928a841115614b2f57600080fd5b948201945b83861015614bc45780868c031215614b4c5760008081fd5b614b546144ae565b8651614b5f816143bf565b81528684015184820152605f87018c13614b795760008081fd5b614b816144d1565b808389018e811115614b935760008081fd5b8a8a015b81811015614bae5780518452928701928701614b97565b5050828a01525085529485019493820193614b34565b509701519698969750505050505050565b6001600160a01b038381168252604060208084018290528451848301819052600093868301929091606087019086805b82811015614c595786518051871685528581015186860152880151888501835b600a811015614c4257825182529187019190870190600101614c25565b505050958401956101809390930192600101614c05565b50919a9950505050505050505050565b6000808335601e19843603018112614c8057600080fd5b83018035915067ffffffffffffffff821115614c9b57600080fd5b60200191503681900382131561320857600080fd5b600060208284031215614cc257600080fd5b815160ff81168114613c4357600080fd5b600181815b80851115614d0e578160001904821115614cf457614cf4614938565b80851615614d0157918102915b93841c9390800290614cd8565b509250929050565b600082614d2557506001610ab1565b81614d3257506000610ab1565b8160018114614d485760028114614d5257614d6e565b6001915050610ab1565b60ff841115614d6357614d63614938565b50506001821b610ab1565b5060208310610133831016604e8410600b8410161715614d91575081810a610ab1565b614d9b8383614cd3565b8060001904821115614daf57614daf614938565b029392505050565b6000613c438383614d16565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60a08152600460a0820152631b5a5b9d60e21b60c082015284602082015283604082015260018060a01b038316606082015260e060808201526000614e5660e08301846149ed565b9695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e988160178501602088016149c9565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614ec98160288401602088016149c9565b01602801949350505050565b602081526000613c4360208301846149ed565b634e487b7160e01b600052603260045260246000fd5b600081614f0d57614f0d614938565b506000190190565b60008251614f278184602087016149c9565b919091019291505056fed67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122012328d83eaef79a632f4c4262c2691a821ab38a7795af9b847eeba44b4f03e1c64736f6c63430008110033",
  "implementation": "0x93dD104528B35E82c061BB0D521096dCF11628FA",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payout(bool,(address,address,uint256,bytes))": {
        "details": "Payout The root method of protocol USD+ Calculates delta total NAV - total supply USD+ and accrues profit or loss among all token holders What do method? - Claim rewards from all strategy - Increase liquidity index USD+ on amount of profit - Decrease liquidity index USD+ on amount of loss Support Insurance mode: Only if insurance is set What the Insurance to do? If USD+ has Loss then Exchange coverts the loss through Insurance if USD+ has profit then Exchange send premium amount to Insurance Explain params:",
        "params": {
          "simulate": "- allow to get amount loss/premium for prepare swapData (call.static)",
          "swapData": "- Odos swap data for swapping OVN->asset or asset->OVN in Insurance"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeem(address,uint256)": {
        "params": {
          "_amount": "Amount of USD+ to burn",
          "_asset": "Asset to redeem"
        },
        "returns": {
          "_0": "Amount of asset unstacked and transferred to caller"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1827,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2106,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 956,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1293,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1398,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16126,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdPlus",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IUsdPlusToken)34137"
      },
      {
        "astId": 16129,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "usdc",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)4652"
      },
      {
        "astId": 16132,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IPortfolioManager)33591"
      },
      {
        "astId": 16135,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "mark2market",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IMark2Market)33499"
      },
      {
        "astId": 16137,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "buyFee",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 16139,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "buyFeeDenominator",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 16141,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "redeemFee",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 16143,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "redeemFeeDenominator",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 16145,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "nextPayoutTime",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 16147,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutPeriod",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 16149,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutTimeRange",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 16152,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "payoutManager",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IPayoutManager)33526"
      },
      {
        "astId": 16154,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "lastBlockNumber",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 16156,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "abroadMin",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 16158,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "abroadMax",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 16160,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "insurance",
        "offset": 0,
        "slot": "316",
        "type": "t_address"
      },
      {
        "astId": 16162,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "oracleLoss",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      },
      {
        "astId": 16164,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "oracleLossDenominator",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 16166,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "compensateLoss",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 16168,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "compensateLossDenominator",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 16170,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "profitRecipient",
        "offset": 0,
        "slot": "321",
        "type": "t_address"
      },
      {
        "astId": 16172,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "blockGetter",
        "offset": 0,
        "slot": "322",
        "type": "t_address"
      },
      {
        "astId": 16175,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "roleManager",
        "offset": 0,
        "slot": "323",
        "type": "t_contract(IRoleManager)33774"
      },
      {
        "astId": 16177,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_reentrancyGuardStatus",
        "offset": 0,
        "slot": "324",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4652": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMark2Market)33499": {
        "encoding": "inplace",
        "label": "contract IMark2Market",
        "numberOfBytes": "20"
      },
      "t_contract(IPayoutManager)33526": {
        "encoding": "inplace",
        "label": "contract IPayoutManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPortfolioManager)33591": {
        "encoding": "inplace",
        "label": "contract IPortfolioManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)33774": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_contract(IUsdPlusToken)34137": {
        "encoding": "inplace",
        "label": "contract IUsdPlusToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/Exchange.sol:Exchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}